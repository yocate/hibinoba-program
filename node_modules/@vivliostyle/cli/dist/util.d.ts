import debugConstructor from 'debug';
import fs from 'node:fs';
import { BaseIssue } from 'valibot';
import type { PublicationManifest } from './schema/publication.schema.js';
export declare const debug: debugConstructor.Debugger;
export declare const cwd: string;
export declare let beforeExitHandlers: (() => void)[];
export declare function runExitHandlers(): void;
export declare function setLogLevel(level?: 'silent' | 'info' | 'verbose' | 'debug'): void;
/**
 * @returns A function that stops logging
 */
export declare function startLogging(text?: string): typeof stopLogging;
/**
 * @returns A function that starts logging again
 */
export declare function suspendLogging(text?: string, symbol?: string): (text?: string) => void;
declare function stopLogging(text?: string, symbol?: string): void;
export declare function log(...obj: any): void;
export declare function logUpdate(...obj: string[]): void;
export declare function logSuccess(...obj: string[]): void;
export declare function logError(...obj: string[]): void;
export declare function logWarn(...obj: string[]): void;
export declare function logInfo(...obj: string[]): void;
export declare class DetailError extends Error {
    detail: string | undefined;
    constructor(message: string | undefined, detail: string | undefined);
}
export declare function gracefulError<T extends Error>(err: T): void;
export declare function readJSON(path: string): any;
export declare function statFileSync(filePath: string, { errorMessage, }?: {
    errorMessage?: string;
}): fs.Stats;
export declare function inflateZip(filePath: string, dest: string): Promise<void>;
export declare function useTmpDirectory(): Promise<[string, () => void]>;
export declare function touchTmpFile(path: string): Promise<() => void>;
export declare function pathEquals(path1: string, path2: string): boolean;
export declare function pathContains(parentPath: string, childPath: string): boolean;
export declare function isUrlString(str: string): boolean;
export declare function findAvailablePort(): Promise<number>;
export declare function checkContainerEnvironment(): boolean;
export declare function isRunningOnWSL(): boolean;
export declare function openEpubToTmpDirectory(filePath: string): Promise<{
    dest: string;
    epubOpfPath: string;
    deleteEpub: () => void;
}>;
export declare const assertPubManifestSchema: (obj: unknown) => obj is PublicationManifest;
export declare function parseJsonc(rawJsonc: string): string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | (string | number | boolean | any | {
    [property: string]: string | number | boolean | any | any | null;
} | null)[] | {
    [property: string]: string | number | boolean | any | any | null;
} | null)[] | {
    [property: string]: string | number | boolean | any | any | null;
} | null)[] | {
    [property: string]: string | number | boolean | any | any | null;
} | null)[] | {
    [property: string]: string | number | boolean | any | any | null;
} | null)[] | {
    [property: string]: string | number | boolean | any | any | null;
} | null)[] | {
    [property: string]: string | number | boolean | any | any | null;
} | null)[] | {
    [property: string]: string | number | boolean | any | any | null;
} | null)[] | {
    [property: string]: string | number | boolean | any | any | null;
} | null)[] | {
    [property: string]: string | number | boolean | any | any | null;
} | null)[] | {
    [property: string]: string | number | boolean | any | any | null;
} | null)[] | {
    [property: string]: string | number | boolean | any | any | null;
} | null;
export declare function prettifySchemaError(rawJsonc: string, issues: BaseIssue<unknown>[]): string;
export {};
//# sourceMappingURL=util.d.ts.map