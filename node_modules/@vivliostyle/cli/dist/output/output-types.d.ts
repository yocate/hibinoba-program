interface OutputFormatTrait<T extends string = string> {
    format: T;
}
/** A single file of PDF */
export interface PdfOutput extends OutputFormatTrait<'pdf'> {
    path: string;
    renderMode: 'local' | 'docker';
    preflight: 'press-ready' | 'press-ready-local' | null;
    preflightOption: string[];
}
/** A directory including publication.json, series of (X)HTML files and assets */
export interface WebPublicationOutput extends OutputFormatTrait<'webpub'> {
    path: string;
}
/** A single file of EPUB */
export interface EpubOutput extends OutputFormatTrait<'epub'> {
    path: string;
    version: '3.0';
}
export type OutputFormat = PdfOutput | WebPublicationOutput | EpubOutput;
export declare const checkOutputFormat: (v: unknown) => v is OutputFormat["format"];
export declare const checkRenderMode: (v: unknown) => v is PdfOutput["renderMode"];
export declare const checkPreflightMode: (v: unknown) => v is PdfOutput["preflight"];
export declare function detectOutputFormat(outputPath: string): OutputFormat['format'];
export {};
//# sourceMappingURL=output-types.d.ts.map