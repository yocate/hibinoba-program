import { MergedConfig, WebbookEntryConfig } from '../input/config.js';
import { ArticleEntryObject } from '../input/schema.js';
import type { PublicationLinks, PublicationManifest, URL as PublicationURL } from '../schema/publication.schema.js';
import { EpubOutput, WebPublicationOutput } from './output-types.js';
export declare function prepareWebPublicationDirectory({ outputDir, }: {
    outputDir: string;
}): Promise<void>;
export declare function decodePublicationManifest(input: PublicationManifest): PublicationManifest;
export declare function writePublicationManifest(output: string, options: {
    title?: string;
    author?: string;
    language?: string;
    readingProgression?: 'ltr' | 'rtl';
    modified: string;
    entries: ArticleEntryObject[];
    cover?: {
        url: string;
        name: string;
    };
    links?: (PublicationURL | PublicationLinks)[];
    resources?: (PublicationURL | PublicationLinks)[];
}): PublicationManifest;
export declare function retrieveWebbookEntry({ webbookEntryUrl, outputDir, }: WebbookEntryConfig & {
    outputDir: string;
}): Promise<{
    entryHtmlFile: string;
    manifest: PublicationManifest | undefined;
}>;
export declare function supplyWebPublicationManifestForWebbook({ entryHtmlFile, outputDir, ...config }: Pick<MergedConfig, 'language' | 'title' | 'author' | 'readingProgression'> & {
    entryHtmlFile: string;
    outputDir: string;
}): Promise<PublicationManifest>;
export declare function copyWebPublicationAssets({ exportAliases, outputs, copyAsset, themesDir, manifestPath, input, outputDir, entries, }: Pick<MergedConfig, 'exportAliases' | 'outputs' | 'copyAsset' | 'themesDir' | 'entries'> & {
    input: string;
    outputDir: string;
    manifestPath: string;
}): Promise<{
    manifest: PublicationManifest;
    actualManifestPath: string;
}>;
export type BuildWebPublicationOptions = Omit<MergedConfig, 'target'> & {
    target: WebPublicationOutput | EpubOutput;
};
export declare function buildWebPublication({ target, ...config }: BuildWebPublicationOptions): Promise<string>;
//# sourceMappingURL=webbook.d.ts.map