"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pdfInfo = exports.pdfFonts = exports.isPdfFontsAvailable = exports.ParserError = void 0;
const execa_1 = __importDefault(require("execa"));
const shelljs_1 = __importDefault(require("shelljs"));
const BOX_COLUMNS = [
    'MediaBox',
    'CropBox',
    'BleedBox',
    'TrimBox',
    'ArtBox',
];
class ParserError extends Error {
}
exports.ParserError = ParserError;
function isPdfFontsAvailable() {
    return shelljs_1.default.which('pdffonts');
}
exports.isPdfFontsAvailable = isPdfFontsAvailable;
async function pdfFonts(filePath) {
    const cmd = await execa_1.default('pdffonts', [filePath]);
    const result = cmd.stdout.split('\n');
    if (!/^name/.test(result[0])) {
        throw new ParserError('Parse Error');
    }
    if (result.length < 3) {
        return { rawResponse: result, fonts: [] };
    }
    const maxLineLength = result[0].length;
    const columns = result[0].split(/(?<!object)\s+/);
    const counter = result[1]
        .split(' ')
        .map((hyp) => hyp.length)
        .reduce((acum, cur, i) => {
        acum.push(cur + (i == 0 ? 0 : acum[i - 1]) + 1);
        return acum;
    }, []);
    const scraper = (line, column) => {
        let extraPad = 0;
        if (line.length > maxLineLength) {
            extraPad = line.indexOf(' ') - counter[0];
        }
        return line
            .substring(counter[columns.indexOf(column) - 1] + extraPad || 0, counter[columns.indexOf(column)] + extraPad)
            .trim();
    };
    const fonts = result.slice(2).map((line) => Object.assign({}, ...columns.map((column) => ({
        [column]: scraper(line, column),
    }))));
    return { rawResponse: result, fonts };
}
exports.pdfFonts = pdfFonts;
async function pdfInfo(filePath) {
    var _a, _b;
    const cmd = await execa_1.default('pdfinfo', ['-box', filePath]);
    const lines = cmd.stdout.split('\n');
    const rawResult = Object.assign({}, ...lines
        .map((line) => line.split(/:\s+/))
        .map((arr) => ({ [arr[0]]: arr[1] })));
    const result = {};
    // parse boundary boxes
    const labels = ['bottomLeftX', 'bottomLeftY', 'topRightX', 'topRightY'];
    for (const column of BOX_COLUMNS) {
        result[column] = Object.assign({}, ...rawResult[column].split(/\s+/).map((val, i) => ({
            [labels[i]]: parseFloat(val),
        })));
    }
    // parse pages
    result['Pages'] = parseInt(rawResult['Pages'], 10);
    // parse page size
    const size = rawResult['Page size'].match(/(\d+) x (\d+)/);
    result['Page size'] = {
        width: parseInt((_a = size === null || size === void 0 ? void 0 : size[1]) !== null && _a !== void 0 ? _a : '0', 10),
        height: parseInt((_b = size === null || size === void 0 ? void 0 : size[2]) !== null && _b !== void 0 ? _b : '0', 10),
        raw: size === null || size === void 0 ? void 0 : size.input,
    };
    // parse pdf version
    result['PDF version'] = parseFloat(rawResult['PDF version']);
    return result;
}
exports.pdfInfo = pdfInfo;
