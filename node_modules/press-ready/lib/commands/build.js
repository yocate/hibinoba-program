"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = void 0;
const upath_1 = __importDefault(require("upath"));
const chalk_1 = __importDefault(require("chalk"));
const cli_table_1 = __importDefault(require("cli-table"));
const pdffonts_1 = require("../pdffonts");
const ghostScript_1 = require("../ghostScript");
const inspectPDF_1 = require("../inspectPDF");
const util_1 = require("../util");
const table_1 = require("../table");
async function build(args) {
    if (typeof args.input !== 'string' || !args.output) {
        throw new Error('No input given');
    }
    if (!ghostScript_1.isGhostscriptAvailable()) {
        throw new Error(`'gs' command missing. Install Ghostscript on your machine.
macOS:
    $ brew install ghostscript

Ubuntu:
    $ apt-get install ghostscript

Windows:
    Download and install the Ghostscript for Windows at
    https://www.ghostscript.com/download/gsdnld.html
    Then, add the installed Ghostscript's bin directory
    (e.g., "C:\\Program Files\\gs\\gs9.52\\bin")
    to the PATH environment variable.
`);
    }
    if (!pdffonts_1.isPdfFontsAvailable()) {
        throw new Error(`'pdffonts' command missing. Install pdffonts on your machine.
macOS:
    $ brew install xpdf

Ubuntu:
    $ apt-get install poppler-utils

Windows:
    Download and install the Xpdf command line tools for Windows at
    http://www.xpdfreader.com/download.html
    Then, add the installed Xpdf's bin directory
    (e.g., "C:\\xpdf-tools-win-4.02\\bin64")
    to the PATH environment variable.
`);
    }
    const resolvedInput = upath_1.default.resolve(args.input);
    const resolvedOutput = upath_1.default.resolve(args.output);
    util_1.log(`Listing fonts in '${args.input}'`);
    const { shouldEnforceOutline } = await inspectPDF_1.inspectPDF(resolvedInput);
    const isEnforceOutline = args['enforce-outline'] !== undefined
        ? args['enforce-outline']
        : shouldEnforceOutline;
    util_1.log('Generating PDF');
    const table = new cli_table_1.default(table_1.tableArgs);
    table.push({
        Input: chalk_1.default.white(args.input),
    }, {
        Output: chalk_1.default.white(args.output),
    }, {
        'Color Mode': args['gray-scale']
            ? chalk_1.default.white('Gray')
            : `${chalk_1.default.cyan('C')}${chalk_1.default.red('M')}${chalk_1.default.yellow('Y')}${chalk_1.default.white('K')}`,
    }, {
        'Enforce outline': isEnforceOutline
            ? chalk_1.default.green('yes')
            : chalk_1.default.red('no'),
    }, {
        'Boundary boxes': args['boundary-boxes']
            ? chalk_1.default.green('yes')
            : chalk_1.default.red('no'),
    });
    util_1.rawLog(table.toString());
    const gsResult = await ghostScript_1.ghostScript({
        inputPath: resolvedInput,
        outputPath: resolvedOutput,
        grayScale: args['gray-scale'],
        enforceOutline: isEnforceOutline,
        boundaryBoxes: args['boundary-boxes'],
    });
    if (gsResult.rawError) {
        util_1.log(chalk_1.default.red(gsResult.rawError));
        util_1.rawLog(chalk_1.default.gray(gsResult.rawOutput));
    }
    else {
        util_1.log('Ghostscript: Done without error');
    }
    util_1.log(`Listing fonts in '${args.output}'`);
    await inspectPDF_1.inspectPDF(resolvedOutput);
}
exports.build = build;
